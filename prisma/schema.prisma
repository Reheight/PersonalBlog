// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMINISTRATOR
  MODERATOR
  AUTHOR
  MEMBER
}

model Member {
  id                    String            @id @default(uuid())
  name                  String            @db.Text
  username              String            @db.VarChar(12)
  passwordHash          String            @db.Text
  emailAddress          String            @db.Text
  role                  ROLE              @default(MEMBER)
  sessions              Session[]         @relation("member_session")
  posts                 Post[]            @relation("member_post")
  comments              CommentInPost[]   @relation("member_comment")

  status                Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Session {
  id                    String            @id @default(uuid())
  token                 String            @db.Text
  expireDate            DateTime
  member                Member            @relation("member_session", fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String

  status                Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Category {
  id                    String            @id @default(uuid())
  name                  String            @db.Text

  posts                 Post[]            @relation("category_post")

  status                Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Tag {
  id                    String            @id @default(uuid())
  name                  String            @db.Text

  posts                 TagInPost[]       @relation("tag_post")

  status                Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Post {
  id                    String            @id @default(uuid())
  subject               String            @db.Text
  description           String            @db.Text

  category              Category          @relation("category_post", fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId            String

  authorId              String
  author                Member            @relation("member_post", fields: [authorId], references: [id], onDelete: Cascade)
  content               String            @db.Text
  
  comments              CommentInPost[]   @relation("post_comment")
  tags                  TagInPost[]       @relation("post_tag")

  status                Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model TagInPost {
  id                    String            @id @default(uuid())

  tag                   Tag               @relation("tag_post", fields: [tagId], references: [id], onDelete: Cascade)
  tagId                 String

  post                  Post              @relation("post_tag", fields: [postId], references: [id], onDelete: Cascade)
  postId                String

  status                Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model CommentInPost {
  id                    String            @id @default(uuid())
  content               String            @db.Text

  author                Member            @relation("member_comment", fields: [authorId], references: [id], onDelete: Cascade)
  authorId              String

  post                  Post              @relation("post_comment", fields: [postId], references: [id], onDelete: Cascade)
  postId                String

  status                Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}